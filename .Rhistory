geom = "line", size = 2, color = "red" )
## 2
n = 3
S = vector()
for(i in 1:15000) {
x = rnorm(n = n, mean = 0, sd = 5)
S[i] =  var(x)*(n/(n-1))/25
}
data = data.frame(coisa = S)
data %>%
ggplot(aes(x = coisa))+
geom_density(color = "blue", size = 2)+
stat_function(fun = dchisq, args = list(df = n - 1),
geom = "line", size = 2, color = "red" )
for(i in 1:15000) {
x = rnorm(n = n, mean = 0, sd = 5)
S[i] =  var(x)*(n/(n-1))/25
}
data = data.frame(coisa = S)
data %>%
ggplot(aes(x = coisa))+
geom_density(color = "blue", size = 2)+
stat_function(fun = dchisq, args = list(df = n - 1),
geom = "line", size = 2, color = "red" )
for(i in 1:25000) {
x = rnorm(n = n, mean = 0, sd = 5)
S[i] =  var(x)*(n/(n-1))/25
}
data = data.frame(coisa = S)
data %>%
ggplot(aes(x = coisa))+
geom_density(color = "blue", size = 2)+
stat_function(fun = dchisq, args = list(df = n - 1),
geom = "line", size = 2, color = "red" )
poder = function(x, sigmazero, alpha = .05)
{
df = length(x) - 1
sigma = var(x)
termo1 = sigma*qchisq(p = alpha/2, df = df)/sigmazero
termo2 = sigma*qchisq(p = 1 - alpha/2, df = df)/sigmazero
P1 = pchisq(termo1, df = df)
P2 = pchisq(termo2, df = df)
pi = P1 + P2
return(pi)
}
dados = read_csv2("Glicemia.csv")
library(readr)
dados <- read_csv("Glicemia.csv")
glicemia = dados$glicemia
library(readr)
dados <- read_csv("Glicemia.csv")
View(Glicemia)
glicemia = dados$glicemia
var(glicemia)
poder(glicemia, sigmazero = 30 )
poder = function(x, sigmazero, alpha = .05)
{
df = length(x) - 1
sigma = var(x)
termo1 = sigma*qchisq(p = alpha/2, df = df)/sigmazero
termo2 = sigma*qchisq(p = 1 - alpha/2, df = df, lower.tail = FALSE)/sigmazero
P1 = pchisq(termo1, df = df)
P2 = pchisq(termo2, df = df)
pi = P1 + P2
return(pi)
}
poder(glicemia, sigmazero = 30 )
ggplot()+
stat_function(poder, args = list(x = glicemia))
ggplot()+
stat_function(fun = poder, args = list(x = glicemia))
ggplot(aes(x))+
stat_function(fun = poder, args = list(x = glicemia))
stat_function(fun = poder, args = list(x = glicemia))
ggplot(aes(x = c(0,1)))+
stat_function(fun = poder, args = list(x = glicemia))
ggplot(data.frame(x = c(0,1)), aes(x))+
stat_function(fun = poder, args = list(x = glicemia))
ggplot(data.frame(x = c(0,1)), aes(x))
+stat_function(fun = poder, args = list(x = glicemia))
ggplot(data.frame(x = c(0,1)), aes(x))+
stat_function(fun = poder, args = list(x = glicemia))
ggplot(data.frame(x = c(0,1)), aes(x))+
stat_function(fun = poder, args = list(x = glicemia), geom = "line")
poder = function(x, sigmazero, alpha = .05)
{
df = length(x) - 1
sigma = var(x)
termo1 = sigma*qchisq(p = alpha/2, df = df)/sigmazero
termo2 = sigma*qchisq(p = 1 - alpha/2, df = df, lower.tail = FALSE)/sigmazero
P1 = pchisq(termo1, df = df)
P2 = pchisq(termo2, df = df)
pi = P1 + P2
return(pi)
}
poder(glicemia, sigmazero = 30 )
ggplot(data.frame(x = c(30,60)), aes(x))+
stat_function(fun = poder, args = list(x = glicemia), geom = "line")
ggplot(data.frame(x = c(0,60)), aes(x))+
stat_function(fun = poder, args = list(x = glicemia), geom = "line")
poder = function(x, sigmazero, alpha = .05)
{
df = length(x) - 1
sigma = var(x)
termo1 = sigma*qchisq(p = alpha/2, df = df)/sigmazero
termo2 = sigma*qchisq(p = 1 - alpha/2, df = df, lower.tail = FALSE)/sigmazero
P1 = pchisq(termo1, df = df)
P2 = pchisq(termo2, df = df, lower.tail = FALSE)
pi = P1 + P2
return(pi)
}
poder(glicemia, sigmazero = 30 )
ggplot(data.frame(x = c(0,60)), aes(x))+
stat_function(fun = poder, args = list(x = glicemia), geom = "line")
ggplot(data.frame(x = c(0,120)), aes(x))+
stat_function(fun = poder, args = list(x = glicemia), geom = "line")
poder = function(x, sigmazero, alpha = .05)
{
df = length(x) - 1
sigma = var(x)
termo1 = sigma*qchisq(p = alpha/2, df = df)/sigmazero
termo2 = sigma*qchisq(p = 1 - alpha/2, df = df)/sigmazero
P1 = pchisq(termo1, df = df)
P2 = pchisq(termo2, df = df, lower.tail = FALSE)
pi = P1 + P2
return(pi)
}
poder(glicemia, sigmazero = 30 )
ggplot(data.frame(x = c(0,120)), aes(x))+
stat_function(fun = poder, args = list(x = glicemia), geom = "line")
ggplot(data.frame(x = c(0,120)), aes(x))+
stat_function(fun = poder, args = list(x = glicemia),
geom = "line", size = 2)
n = 3
S = vector()
for(i in 1:25000) {
x = rnorm(n = n, mean = 0, sd = 5)
S[i] =  var(x)*(n/(n-1))/25
}
data = data.frame(coisa = S)
data %>%
ggplot(aes(x = coisa))+
geom_density(color = "blue", size = 2)+
stat_function(fun = dchisq, args = list(df = n - 1),
geom = "line", size = 2, color = "red" )
for(i in 1:250000) {
x = rnorm(n = n, mean = 0, sd = 5)
S[i] =  var(x)*(n/(n-1))/25
}
data = data.frame(coisa = S)
data %>%
ggplot(aes(x = coisa))+
geom_density(color = "blue", size = 2)+
stat_function(fun = dchisq, args = list(df = n - 1),
geom = "line", size = 2, color = "red" )
Sys.setlocale(category="LC_ALL", locale = "English_United States.1252")
### TESTES DE ADERENCIA
### UMA PRIMEIRA APLICAÇÃO EM EQUILIBRIO DE HARDY-WEINBERG
library(readr)
dados = read_csv("Genotipo.csv")
## vetor de probabilidades compativeis com equilibrio HW
p = c(0.25, 0.50, 0.25)
## frequencias observadas
table(dados$genotipo)/nrow(dados)
## inspecionar as probabilidades
library(dplyr)
tabela_dif = dados %>%
group_by(genotipo) %>%
summarise(observada = n()) %>%
mutate(esperada = p*100)
## teste mais formal chi-quadrado para probabilidades dadas
chisq.test(table(dados$genotipo),
p = p,
correct = FALSE)
################
amostra = read_table2("amostras.txt")
chisq.test(table(amostra$amost1), p = c(.5, .5), correct = FALSE)
teste2 = chisq.test(table(amostra$amost2), p = dbinom(0:3, 3, .8), correct = FALSE)
teste2$expected
teste3 = chisq.test(table(amostra$amost3),
p = dpois(x = 0:15, lambda = 10),
correct = FALSE)
plot(dpois(0:25, 10))
tabela = matrix(c(8,62,15,67,11,57),
nrow=2,3)
tabela
chisq.test(tabela, correct = FALSE)
tabela2 = matrix(c(8,72,15,65,11,69),
nrow= 2, 3)
tabela2
chisq.test(tabela2, correct = FALSE)
### TESTES DE ADERENCIA
### TESTAR SE DADOS ADEREM À UMA DISTRIBUIÇÃO ESPECIFICADA
### UMA PRIMEIRA APLICAÇÃO EM EQUILIBRIO DE HARDY-WEINBERG
library(readr)
dados = read_csv("Genotipo.csv")
## vetor de probabilidades compativeis com equilibrio HW
p = c(0.25, 0.50, 0.25)
## frequencias observadas
table(dados$genotipo)/nrow(dados)
## inspecionar as probabilidades
library(dplyr)
tabela_dif = dados %>%
group_by(genotipo) %>%
summarise(observada = n()) %>%
mutate(esperada = p*100)
## teste mais formal chi-quadrado para probabilidades dadas
chisq.test(table(dados$genotipo),
p = p,
correct = FALSE)
################
amostra = read_table2("amostras.txt")
chisq.test(table(amostra$amost1), p = c(.5, .5), correct = FALSE)
teste2 = chisq.test(table(amostra$amost2), p = dbinom(0:3, 3, .8), correct = FALSE)
teste2$expected
teste3 = chisq.test(table(amostra$amost3),
p = dpois(x = 0:15, lambda = 10),
correct = FALSE)
plot(dpois(0:25, 10))
################# TESTE DE INDEPENDÊNCIA
############# TESTAS SE AMOSTRAS SÃO INDEPENDENTES
## produtos de 3 fábricas, podem ser defeituosos ou não
tabela = matrix(c(8,62,15,67,11,57),
nrow= 2, 3)
tabela
chisq.test(tabela, correct = FALSE)
## não rejeitamos a hipotese nula de que as probabilidades de cada evento são
## os produtos das marginais, a amostra parece ser independente
##################### TESTE DE HOMOGENEIDADE
#### TESTAR SE UMA PROPRIEDADE É HOMOGENEA ENTRE SUBGRUPOS DE UMA AMOSTRA
## produtos de 3 fábricas, exatamente 80 de cada
tabela2 = matrix(c(8,72,15,65,11,69),
nrow= 2, 3)
tabela2
dados = read_csv("Genotipo.csv")
setwd("C:/Users/pedro/Desktop/metodoscomputacionaisII/aula15_testes_chi_quadrado")
dados = read_csv("Genotipo.csv")
## vetor de probabilidades compativeis com equilibrio HW
p = c(0.25, 0.50, 0.25)
## frequencias observadas
table(dados$genotipo)/nrow(dados)
## inspecionar as probabilidades
library(dplyr)
tabela_dif = dados %>%
group_by(genotipo) %>%
summarise(observada = n()) %>%
mutate(esperada = p*100)
## teste mais formal chi-quadrado para probabilidades dadas
chisq.test(table(dados$genotipo),
p = p,
correct = FALSE)
tabela2
for(i in 1:3) {
p_i = tabela2[1,i]/(tabela2[1,i]+tabela2[2,i])
}
for(i in 1:3) {
assign(paste("p",i)) = tabela2[1,i]/(tabela2[1,i]+tabela2[2,i])
}
chisq.test(tabela2, correct = FALSE) ## não rejeitamos a hipotese nula
for(i in 1:3) {
assign(paste("p",i),  tabela2[1,i]/(tabela2[1,i]+tabela2[2,i]))
}
for(i in 1:3) {
assign(paste("p",i, sep = ""),  tabela2[1,i]/(tabela2[1,i]+tabela2[2,i]))
}
probs = rbind(p1, p2, p3)
probs
prob = tibble(p = probs)
prob = tibble(p = probs)
probs = rbind(p1, p2, p3)
probs = vector(rbind(p1, p2, p3))
probs = rbind(p1, p2, p3)
class(probs)
as.data.frame(probs)
probs = as.data.frame(rbind(p1, p2, p3))
prob = tibble(p = probs)
probs = tibble(probs)
probs = as.data.frame(rbind(p1, p2, p3))
probs = tibble(probs)
probs = as.tibble(probs)
library(tidyverse)
probs = as.tibble(probs)
probs
probs %>%
ggplot(aes(x = V1)) +
geom_bar()
probs %>%
ggplot(aes(x = V1)) +
geom_bar()
probs %>%
ggplot(aes(x = V1)) +
geom_bar()
plot(tabela2)
plot(p1,p2,p3)
plot(probs)
barplot(probs)
barplot(p1,p2,p3)
probs = rbind(p1, p2, p3)
barplot(probs)
barplot(probs, horiz = FALSE)
barplot(probs, horiz = TRUE)
probs
barplot(probs, horiz = FALSE)
barplot(probs, horiz = FALSE, beside = TRUE)
barplot(probs, horiz = FALSE, beside = TRUE,
xlab = "Probabilidade de defeito nas fábricas 1, 2 e 3")
chisq.test(tabela2, correct = FALSE) ## não rejeitamos a hipotese nula
tabela2
barplot(probs, horiz = FALSE, beside = TRUE,
xlab = "Probabilidade de defeito nas fábricas 1, 2 e 3")
H = rep("R", times = 50)
H rbind(H, rep("NR", times = 20))
H = rbind(H, rep("NR", times = 20))
H
H = rep("R", times = 50)
G
H
H = rbind(H, rep("NR", times = 20))
H = cbind(H, rep("NR", times = 20))
H = rep("R", times = 50)
H = cbind(H, rep("NR", times = 20))
H
H = rep("R", times = 50)
H = rbind(H, rep("NR", times = 20))
H
H = rbind(rep("R", times = 50),
rep("NR", times = 20))
H
data = matrix(c(25,50,25,20), nrow = 2, ncol = 2)
data
colnames(data) = c("H", "M")
data
rownames(data) = c("R","NR")
data
table(data)
chisq.test(data)
library(tidyverse)
data = as.data.frame(data)
data
gather(key = "Sexo", value = "Resposta")
gather(data, key = "Sexo", value = "Resposta")
data = matrix(c(25,50,25,20), nrow = 2, ncol = 2)
install.packages("lawstat")
setwd("C:/Users/pedro/Desktop/metodoscomputacionaisII/aula16_anova")
## Aula 16 - ANOVA
library(tidyverse)
tempo = read_csv2("Tempo Vida.csv")
tempo
tempo %>%
ggplot(aes(x = Marca)) +
geom_boxplot()
tempo %>%
ggplot(aes(x = Marca, y = tempovida)) +
geom_boxplot()
tempo %>%
group_by(Marca) %>%
summarise(Media = mean(tempovida), sd = sd(tempovida), N = n())
tempo %>%
ggplot() +
stat_qq() +
stat_qq_line() +
facet_wrap(~ Marca)
tempo %>%
ggplot(aes(x = c(0,1))) +
stat_qq() +
stat_qq_line() +
facet_wrap(~ Marca)
tempo %>%
ggplot(aes(x = c(-2,2))) +
stat_qq() +
stat_qq_line() +
facet_wrap(~ Marca)
tempo %>%
ggplot(sample(x = c(-2,2))) +
stat_qq() +
stat_qq_line() +
facet_wrap(~ Marca)
tempo %>%
ggplot(aes(y = tempovida)) +
stat_qq() +
stat_qq_line() +
facet_wrap(~ Marca)
tempo %>%
ggplot(aes(y = tempovida)) +
geom_qq() +
stat_qq_line() +
facet_wrap(~ Marca)
tempo %>%
ggplot(aes(sample = tempovida)) +
geom_qq() +
stat_qq_line() +
facet_wrap(~ Marca)
tempo %>%
ggplot(aes(sample = tempovida, color = Marca)) +
geom_qq() +
stat_qq_line() #+
temp
tempo
ks.test(data = tempo[Marca == "A",],
y = pnorm, args = list(mean = mean(tempo[Marca == "A",]$tempovida),
sd = sd(tempo[Marca == "A",]$tempovida)))
ks.test(x = tempo[Marca == "A",],
y = pnorm, args = list(mean = mean(tempo[Marca == "A",]$tempovida),
sd = sd(tempo[Marca == "A",]$tempovida)))
tempo
tempo %>%
ggplot(aes(sample = tempovida, color = Marca)) +
geom_qq() +
stat_qq_line()
tempo %>%
ggplot(aes(sample = tempovida)) +
geom_qq() +
stat_qq_line()+
facet_wrap(~ Marca)
ks.test(x = tempo[Marca == "A",],
y = pnorm, args = list(mean = mean(tempo[Marca == "A",]$tempovida),
sd = sd(tempo[Marca == "A",]$tempovida)))
tempo
ks.test(x = tempo[tempo$Marca == "A",],
y = pnorm, args = list(mean = mean(tempo[tempo$Marca == "A",]$tempovida),
sd = sd(tempo[tempo$Marca == "A",]$tempovida)))
ks.test(x = tempo[tempo$Marca == "A",],
y = pnorm, args = list(mean = mean(tempo$tempovida[tempo$Marca == "A",]),
sd = sd(tempo$tempovida[tempo$Marca == "A",])))
ks.test(x = tempo[tempo$Marca == "A",],
y = pnorm, list(mean = mean(tempo$tempovida[tempo$Marca == "A",]),
sd = sd(tempo$tempovida[tempo$Marca == "A",])))
ks.test(x = tempo[tempo$Marca == "A",],
y = pnorm, mean = mean(tempo$tempovida[tempo$Marca == "A",]),
sd = sd(tempo$tempovida[tempo$Marca == "A",]))
ks.test(x = tempo[tempo$Marca == "A"],
y = pnorm, mean = mean(tempo$tempovida[tempo$Marca == "A"]),
sd = sd(tempo$tempovida[tempo$Marca == "A"]))
ks.test(x = tempo[tempo$Marca == "A",],
y = pnorm, mean = mean(tempo$tempovida[tempo$Marca == "A"]),
sd = sd(tempo$tempovida[tempo$Marca == "A"]))
tempo[tempo$Marca == "A"]
tempo[tempo$Marca == "A",]
ks.test(x = tempo$tempovida[tempo$Marca == "A"],
y = pnorm, mean = mean(tempo$tempovida[tempo$Marca == "A"]),
sd = sd(tempo$tempovida[tempo$Marca == "A"]))
ks.test(x = tempo$tempovida[tempo$Marca == "A"],
y = pnorm, mean = mean(tempo$tempovida[tempo$Marca == "A"]),
sd = sd(tempo$tempovida[tempo$Marca == "A"]))
baseA = tempo %>%
filter(Marca == A)
baseA = tempo %>%
filter(Marca == "A")
baseB = tempo %>%
filter(Marca == "B")
baseC = tempo %>%
filter(Marca == "C")
baseD = tempo %>%
filter(Marca == "D")
ks.test(x = baseA$tempovida,
y = pnorm,
mean = mean(baseA$tempovida),
sd = sd(baseA$tempovida))
baseA %>% ks.test(x = tempovida,
y = pnorm,
mean = mean(tempovida),
sd = sd(tempovida))
ks.test(x = baseA$tempovida,
y = pnorm,
mean = mean(baseA$tempovida),
sd = sd(baseA$tempovida))
ks.test(x = baseB$tempovida,
y = pnorm,
mean = mean(baseB$tempovida),
sd = sd(baseB$tempovida))
ks.test(x = baseC$tempovida,
y = pnorm,
mean = mean(baseC$tempovida),
sd = sd(baseC$tempovida))
ks.test(x = baseD$tempovida,
y = pnorm,
mean = mean(baseD$tempovida),
sd = sd(baseD$tempovida))
aov(tempovida ~ Marca)
aov(tempovida ~ Marca,
data = tempo)
tempo$tempovida = factor(tempo$tempovida)
tempo
tempo = read_csv2("Tempo Vida.csv")
tempo$tempovida
tempo
tempo$Marca = factor(tempo$Marca)
tempo
aov(tempovida ~ Marca,
data = tempo)
ANOVA1 = aov(tempovida ~ Marca,
data = tempo)
summary(ANOVA1)
lawstat::levene.test(y = tempo$tempovida, group = tempo$Marca,
location = "center")
lawstat::levene.test(y = tempo$tempovida, group = tempo$Marca,
location = "mean")
PostHocTest(ANOVA1,
method = "bonferroni")
library(DescTools)
DestTools::PostHocTest(ANOVA1,
method = "bonferroni")
DescTools::PostHocTest(ANOVA1,
method = "bonferroni")
DescTools::PostHocTest(ANOVA1,
method = "duncan")
TukeyHSD(ANOVA1)
tempo %>%
ggplot(aes(sample = tempovida)) +
geom_qq() +
stat_qq_line()+
facet_wrap(~ Marca)
